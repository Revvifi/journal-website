
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model Article {
  id        String     @default(cuid()) @id
  title     String
  published Boolean @default(false)
  author    User?   @relation(fields: [authorId], references: [id])
  authorId  String?
  createdAt DateTime @default(now()) @map(name: "created_at")
  credit    String?
  type     String @default("pdf")
  comments  Comment[]
  featured  Boolean @default(false)
  funfacts  FunFact[]
}
model Comment{
  id        String     @default(cuid()) @id
  content   String
  author    User?   @relation(fields: [authorId, authorName], references: [id, name])
  authorId  String?
  article   Article? @relation(fields: [articleId], references: [id])
  articleId String?
  createdAt DateTime @default(now()) @map(name: "created_at")
  authorName String?
  upvotes   String[]
  downvotes String[]

}

model User {
  id            String       @default(cuid()) @id
  name          String?   @unique
  email         String?   @unique
  passwordHash  String?
  salt         String?
  createdAt     DateTime  @default(now()) @map(name: "created_at")
  updatedAt     DateTime  @updatedAt @map(name: "updated_at")
  posts         Article[]
  admin        Boolean    @default(false)
  comments     Comment[]
  funfacts     FunFact[]
  country      String?
  @@map(name: "users")
  @@unique([id, name])
}

model FunFact {
  id       String     @default(cuid()) @id
  content  String
  author   User?   @relation(fields: [authorId], references: [id])
  authorId String?
  createdAt DateTime @default(now()) @map(name: "created_at")
  Article   Article? @relation(fields: [articleId], references: [id]) 
  articleId String?
  published Boolean @default(false)
}